{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","totalSupply","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","MyToken","abi","networks","address","tokenSaleInstance","MyTokenSale","kycInstance","KYCContract","listenToTokenTransfer","setState","updateUserTokens","updateTotalSupply","alert","error","methods","call","balanceOf","events","Transfer","to","on","handleBuyTokens","buyTokens","send","from","value","utils","toWei","handleInputChange","event","target","type","checked","name","handleWLButtonPressed","setKYCComplete","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebd080a0.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n// import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport MyToken from \"./contracts/MyToken.json\";\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\nimport KYCContract from \"./contracts/KYCContract.json\";\n\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded:false, kycAddress:'0x123...',tokenSaleAddress:null,userTokens:0,totalSupply:0};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n      this.tokenInstance = new this.web3.eth.Contract(\n          MyToken.abi,\n          MyToken.networks[this.networkId] && MyToken.networks[this.networkId].address,\n      );\n      this.tokenSaleInstance = new this.web3.eth.Contract(\n          MyTokenSale.abi,\n          MyTokenSale.networks[this.networkId] && MyTokenSale.networks[this.networkId].address,\n      );\n      this.kycInstance = new this.web3.eth.Contract(\n          KYCContract.abi,\n          KYCContract.networks[this.networkId] && KYCContract.networks[this.networkId].address,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.listenToTokenTransfer();\n      this.setState({loaded:true, tokenSaleAddress:MyTokenSale.networks[this.networkId].address},this.updateUserTokens,this.updateTotalSupply());\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  updateTotalSupply = async ()=>{\n    let totalSupply = await this.tokenInstance.methods.totalSupply().call();\n    this.setState({totalSupply:totalSupply});\n  };\n\n  updateUserTokens = async () => {\n    let userTokens = await this.tokenInstance.methods.balanceOf(this.accounts[0]).call();\n    this.setState({userTokens:userTokens});\n  };\n\n  listenToTokenTransfer = () => {\n    this.tokenInstance.events.Transfer({to:this.accounts[0]}).on(\"data\",this.updateUserTokens);\n    this.tokenInstance.events.Transfer({}).on(\"data\",this.updateTotalSupply);\n  };\n\n  // listenToSupplyChanged\n\n  handleBuyTokens = async  () => {\n    console.log(this.accounts[0]);\n    await this.tokenSaleInstance.methods.buyTokens(this.accounts[0]).send({from: this.accounts[0],value:this.web3.utils.toWei(\"1\",\"wei\")});\n  };\n\n  handleInputChange = (event) =>{\n    console.log(event);\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]:value\n    });\n  };\n\n  handleWLButtonPressed = async () => {\n    await this.kycInstance.methods.setKYCComplete(this.state.kycAddress).send({from: this.accounts[0]});\n    alert(\"KYC for \"+this.state.kycAddress +\" has been set\");\n  };\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Pay me a token - the friendly Pay Me Token</h1>\n        <p>Get your tokens while they are hot.</p>\n        <p>Current total supply is {this.state.totalSupply}</p>\n        <h2>KYC whitelisting</h2>\n          Address to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange}/>\n          <button type=\"button\" onClick={this.handleWLButtonPressed}>whitelist</button>\n        <h2>Buy some</h2>\n        <p>If you want them - send them Eth to {this.state.tokenSaleAddress}</p>\n        <p>You are <b>having just</b> {this.state.userTokens} PMT... seriously? You definitely want to have more!!</p>\n        <button type=\"button\" onClick={this.handleBuyTokens}>Get you one!</button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}